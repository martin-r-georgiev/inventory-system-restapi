# This is the Gradle build system for JVM applications
# https://gradle.org/
# https://github.com/gradle/gradle
stages:
  - build
  - test
  - sonarqube
  - deploy

# Disable the Gradle daemon for Continuous Integration servers as correctness
# is usually a priority over speed in CI environments. Using a fresh
# runtime for each build is more reliable since the runtime is completely
# isolated from any previous builds.
variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  SONAR_TOKEN: 3e92b7fd81d7b4d6e170dd57f59e67f76f753fa6
  SONAR_HOST_URL: http://host.docker.internal:8000

before_script:
  - set GRADLE_USER_HOME=`pwd`/.gradle
  - cd java-restful-api

build:
  stage: build
  image: gradle:alpine
  script:
      - ./gradlew --build-cache assemble
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
      - build
      - .gradle

test:
  stage: test
  image: gradle:alpine
  script:
      - ./gradlew check
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - build
      - .gradle

sonarqube:
  stage: sonarqube
  image: gradle:alpine
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: 0  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
      - ./gradlew jacocoTestReport sonarqube
  allow_failure: true
  only:
    - merge_requests
    - master
    - develop

docker-deploy:
    stage: deploy
    image: tiangolo/docker-with-compose
    services:
      - docker:dind
    before_script:
      - echo $CI_REGISTRY
      - echo $CI_REGISTRY_PASSWORD | docker login -u "$CI_REGISTRY_USER" --password-stdin  $CI_REGISTRY
    script:
      - docker build --pull -t "$CI_REGISTRY_IMAGE" .
      - docker push "$CI_REGISTRY_IMAGE"
    only:
      - master
    when: manual
